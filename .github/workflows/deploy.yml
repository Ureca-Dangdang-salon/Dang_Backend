name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # 1. 빌드와 테스트
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. JAR 파일 빌드
      - name: Build JAR file
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -Dspring.profiles.active=test

      # 4. 테스트 실행
      - name: Run tests
        run: ./gradlew test -Dspring.profiles.active=test

  # 2. 배포
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test # 빌드와 테스트 성공 시에만 실행
    if: github.event_name == 'push' # Push 이벤트일 때만 실행
    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t dangdang-salon:latest .

      # 3. Docker Hub로 이미지 푸시
      - name: Push Docker image to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
          docker tag dangdang-salon:latest $DOCKER_USERNAME/dangdang-salon:latest
          docker push $DOCKER_USERNAME/dangdang-salon:latest

      # 4. 서버에서 컨테이너 실행
      - name: Deploy to Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.EC2_SERVER_IP }}
          SERVER_USER: ${{ secrets.EC2_SERVER_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "
            cd /home/ubuntu/app && \
            docker-compose pull && \
            docker-compose up -d
          "
